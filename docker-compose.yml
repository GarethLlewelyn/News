version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Pinning version
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Pinning version
    container_name: kafka
    ports:
      # Exposes 9092 for external connections to the broker
      # See KAFKA_ADVERTISED_LISTENERS for how PLAINTEXT_HOST listener is configured
      - "9092:9092"
      # Port used by services within the Docker network (e.g., our FastAPI app)
      # - "9093:9093" # This port is for internal Docker network communication, not typically exposed to host
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Listener for inter-broker communication and for services within the Docker network
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT # Inter-broker communication listener name
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # Required for Confluent images
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Required for Confluent images
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Convenient for development
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  redis:
    image: redis:7.0-alpine # Pinning version, using alpine for smaller size
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_news_app
    ports:
      - "8000:8000"
    # env_file:
    #   - .env # Load environment variables from .env file - Temporarily removed for debugging
    environment:
      # Explicitly set required environment variables
      - REDIS_HOST=redis # Service name in docker-compose
      # Provide KAFKA_BOOTSTRAP_SERVERS as a JSON formatted string
      - KAFKA_BOOTSTRAP_SERVERS=["kafka:9093"] # Service name and internal port in docker-compose - Ensure no outer quotes are passed
      # Add other necessary variables here if not relying on .env for them
      - LOG_LEVEL=INFO # Example, can be overridden in .env if env_file is restored
    volumes:
      - .:/app # Mount local code for development; remove for production image usage
    command: sh -c "echo 'KAFKA_BOOTSTRAP_SERVERS is:'; printenv KAFKA_BOOTSTRAP_SERVERS; echo 'Starting Uvicorn...'; uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      - redis
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  kafka-data:
    driver: local 